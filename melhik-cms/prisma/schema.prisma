generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Religion {
  id          Int      @id @default(autoincrement())
  name        String
  nameEn      String?
  description String?
  color       String   @default("#8B4513")
  syncStatus  String   @default("pending") // "pending", "synced"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]

  @@map("religions")
}

model Topic {
  id          Int          @id @default(autoincrement())
  religionId  Int
  title       String
  titleEn     String?
  description String?
  imageUrl    String?      // URL to topic image
  imageAlt    String?      // Alt text for accessibility
  syncStatus  String       @default("pending") // "pending", "synced"
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  details     TopicDetail?
  religion    Religion     @relation(fields: [religionId], references: [id], onDelete: Cascade)

  @@map("topics")
}

model TopicDetail {
  id          Int      @id @default(autoincrement())
  topicId     Int      @unique
  explanation String
  bibleVerses String?
  keyPoints   String?
  references  String?
  version     Int      @default(1)
  syncStatus  String   @default("pending") // "pending", "synced"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("topic_details")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  firstName   String?
  lastName    String?
  email       String?   @unique
  password    String
  role        String    @default("content_manager") // admin, content_manager
  status      String    @default("active") // active, inactive
  permissions String?   // JSON string for granular permissions
  lastLoginAt DateTime?
  avatarUrl   String?
  isFirstLogin Boolean  @default(true) // Track if user has logged in for the first time
  requiresPasswordChange Boolean @default(false) // Track if user needs to change password
  createdBy   Int?      // ID of user who created this user
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Self-referencing relationship for createdBy
  createdUsers User[] @relation("UserCreator")
  creator      User?  @relation("UserCreator", fields: [createdBy], references: [id])

  // User activities
  activities UserActivity[]

  // SMTP configurations created by this user
  smtpConfigs SmtpConfig[] @relation("SmtpConfigCreator")

  @@map("users")
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String   // login, logout, create, update, delete, etc.
  resource  String?  // what resource was affected (user, topic, religion, etc.)
  resourceId Int?    // ID of the affected resource
  details   String?  // JSON string with additional details
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model SmtpConfig {
  id          Int      @id @default(autoincrement())
  name        String   // Configuration name (e.g., "Default", "Gmail", "Outlook")
  host        String   // SMTP server host
  port        Int      // SMTP server port
  secure      Boolean  @default(false) // Use SSL/TLS
  username    String   // SMTP username/email
  password    String   // SMTP password (encrypted)
  fromEmail   String   // Default from email address
  fromName    String?  // Default from name
  isActive    Boolean  @default(true) // Whether this config is active
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?     // ID of user who created this config
  creator     User?    @relation("SmtpConfigCreator", fields: [createdBy], references: [id])

  @@map("smtp_configs")
}
